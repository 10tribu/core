<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <title>Interactions - Principe</title>
    <date>12.12.2015</date>
    <author>
        <firstname>Skyline-ch</firstname>
        <email>&lt;skyline-ch@play-4-fun.net&gt;</email>
    </author>
    <authorinitials>S</authorinitials>
<revhistory><revision><revnumber>2.0.0</revnumber><date>12.12.2015</date><authorinitials>S</authorinitials></revision></revhistory>
</articleinfo>
<simpara>Le système d&#8217;interaction dans Jeedom permet de réaliser des actions à partir de commandes textes ou vocales.</simpara>
<simpara>Type de commandes :</simpara>
<itemizedlist>
<listitem>
<simpara>
action : lancer une commande, exemples : activer ou désactiver une lampe, alarme, chauffage, etc&#8230;
</simpara>
</listitem>
<listitem>
<simpara>
Info : interroger Jeedom avec une commande info pour connaître, par exemple la température du salon, l'état d&#8217;un appareil.
</simpara>
</listitem>
</itemizedlist>
<simpara>Ces commandes peuvent être obtenues par :</simpara>
<itemizedlist>
<listitem>
<simpara>
SMS : envoyer un SMS pour lancer des commandes (action) ou poser une question (info).
</simpara>
</listitem>
<listitem>
<simpara>
Vocal : dicter une phrase avec Siri, Google Now, SARAH, etc&#8230; Pour lancer des commandes (action) ou poser une question (info).
</simpara>
</listitem>
<listitem>
<simpara>
HTTP : lancer une URL HTTP contenant le texte (ex. Tasker, Slack) pour lancer des commandes (action) ou poser une question (info).
</simpara>
</listitem>
</itemizedlist>
<simpara>L&#8217;intérêt des interactions réside dans l&#8217;intégration simplifiée dans d&#8217;autres systèmes comme smartphone, tablette, autre box domotique, ect&#8230;</simpara>
<simpara>Avec un seul mécanisme sur d&#8217;autres systèmes, on peut donc contrôler tout Jeedom, ce qui permet une grande souplesse et d'éviter les bugs en cas de modification de la configuration de vos équipements comme ce serait le cas avec un accès direct via l&#8217;url de chaque commande.</simpara>
<section id="_premier_pas">
<title>Premier pas</title>
<section id="_page_accueil_des_interactions">
<title>Page accueil des interactions</title>
<simpara>Pour accéder à la page d&#8217;interaction il faut aller sur Outils &#8594; Interactions:</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact001.png"/>
  </imageobject>
  <textobject><phrase>../images/interact001.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Liste des interactions et action générale :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact002.png"/>
  </imageobject>
  <textobject><phrase>../images/interact002.png</phrase></textobject>
</mediaobject>
</informalfigure>
<tip><simpara>Comme à beaucoup d&#8217;endroits sur Jeedom, mettre la souris tout à gauche permet de faire apparaître un menu d&#8217;accès rapide (vous pouvez à partir de votre profil le laisser toujours visible).</simpara></tip>
<itemizedlist>
<listitem>
<simpara>
En haut de page, on trouve 3 boutons :
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis role="strong">1</emphasis> Le bouton "Ajouter" qui permet de créer de nouvelles interactions.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">2</emphasis> Le bouton "Régénérer" qui va recréer toutes les interactions (peut être très long &gt; 5mn).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">3</emphasis> Le bouton "Tester" qui permet d&#8217;ouvrir un boîte de dialogue pour écrire et tester une phrase.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<tip><simpara>Si vous avez une interaction qui génère les phrases pour les lumières par exemple, et que vous ajoutez un nouveau module de commande de lumière, il vous faudra soit régénérer toutes les interactions, soit aller dans l&#8217;interaction en question et la sauvegarder de nouveau pour créer les phrases de ce nouveau module.</simpara></tip>
</section>
<section id="_créer_modifier_une_interaction">
<title>Créer-Modifier une interaction</title>
<simpara>Le principe de création est assez simple, on va définir une phrase modèle génératrice qui va permettre à Jeedom de créer une ou plusieurs centaines d’autres phrases qui seront des combinaisons possibles du modèle.</simpara>
<simpara>On va définir de la même façon des réponses avec un modèle (ça permet à Jeedom d’avoir plusieurs réponses pour une seule et même question).</simpara>
<simpara>On peut aussi définir une commande à exécuter si par exemple l&#8217;interaction n&#8217;est pas liée à une action mais une information ou si on souhaite réaliser une action particulière après celle-ci (il est aussi possible d&#8217;exécuter un scénario, de contrôler plusieurs commandes&#8230;).</simpara>
<section id="_interphase_de_configuration">
<title>Interphase de configuration</title>
<simpara>Cette page permet de configurer toutes les interactions orales (via le module SARAH, ou tasker (+ autovoice), voir <ulink url="https://jeedom.fr/doc/documentation/howto/fr_FR/doc-howto-android.autovoice.html">ici</ulink>) ou écrites ( les SMS ou le plugin Slack par exemple…) que l’on peut trouver sur le Market Jeedom.</simpara>
<simpara>Une fois l&#8217;interaction créée ou un clic sur une interaction existante pour la modifier, vous arrivez sur la page de configuration de l&#8217;interaction :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact003.png"/>
  </imageobject>
  <textobject><phrase>../images/interact003.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Ici vous trouvez 2 zones avec plusieurs éléments en leur sein :</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis role="strong">Général</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis role="strong">Nom</emphasis> : nom de l&#8217;interaction (peut être vide, le nom remplace le texte de la demande dans la liste des interactions).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Groupe</emphasis> : groupe de l&#8217;interaction, cela permet de les organiser (peut être vide, sera donc dans le groupe "aucun").
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Demande</emphasis> : la phrase modèle génératrice (obligatoire).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Synonyme</emphasis> : permet de définir des synonymes sur les noms des commandes.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Réponse</emphasis> : la réponse à fournir.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Conversion binaire</emphasis> : permet de convertir les valeurs binaires en ouvert/fermé par exemple (uniquement pour les commandes de type info binaire).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Utilisateurs autorisés</emphasis> : limite l&#8217;interaction à certains utilisateurs (les logins séparés par des |).
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Filtres (limite le champ d&#8217;application pour le modèle aux éléments sélectionnés)</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis role="strong">Limiter aux commandes de type</emphasis> : permet de n&#8217;utiliser que les types actions, infos ou les 2 types.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Limiter aux commandes ayant pour sous-type</emphasis> : permet de limiter la génération à un ou plusieurs sous-types.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Limiter aux commandes ayant pour unité</emphasis> : permet de limiter la génération à une ou plusieurs unités (Jeedom crée la liste automatiquement à partir des unités définies dans vos commandes).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Limiter aux commandes appartenant à l&#8217;objet</emphasis> : permet de limiter la génération à un ou plusieurs objets (Jeedom crée la liste automatiquement à partir des objets que vous avez créés).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Limiter au plugin</emphasis> : permet de limiter la génération à un ou plusieurs plugins (Jeedom crée la liste automatiquement à partir des plugins installés).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Limiter à la catégorie</emphasis> : permet de limiter la génération à une ou plusieurs catégories.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Limiter à l'équipement</emphasis> : permet de limiter la génération à un seul équipement/module (Jeedom crée la liste automatiquement à partir des équipements/modules que vous avez).
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Action</emphasis> : à utiliser si vous voulez cibler une ou plusieurs commandes spécifiques ou passer des paramètres particuliers.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Phrases générées</emphasis>
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis role="strong">Phrases générées</emphasis> : Bouton qui permet de voir les phrases générées par la phrase modèle génératrice (Vous devez sauver l&#8217;interaction pour générer ou régénérer les phrases).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Nombre de phrases générées</emphasis> : nombre de phrases générées.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section id="_interaction_simple">
<title>Interaction simple</title>
<simpara>La façon la plus simple de configurer une interaction c&#8217;est de lui donner un modèle générateur rigide sans variation possible, cette méthode ciblera très précisément une commande, ou un scénario.</simpara>
<simpara>Dans l&#8217;exemple qui suit, on peut voir dans le champ "Demande" la phrase exacte à fournir pour déclencher l&#8217;interaction, ici pour allumer le plafonnier du salon.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact004.png"/>
  </imageobject>
  <textobject><phrase>../images/interact004.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>On peut voir sur cette capture la configuration pour avoir une interaction liée à une action spécifique, cette action est définie dans la partie "Action" de la page.</simpara>
<simpara>On peut très bien imaginer faire de même avec plusieurs actions pour allumer plusieurs lampes dans le salon comme l&#8217;exemple qui suit :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact005.png"/>
  </imageobject>
  <textobject><phrase>../images/interact005.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Dans les 2 exemples ci-dessus, la phrase modèle est identique mais les actions qui en découlent changent en fonction de ce qui est configuré dans la partie "Action", on peut donc déjà avec une interaction simple à phrase unique imaginer des actions combinées entre diverses commandes et divers scénarios (on peut aussi déclencher des scénarios dans la partie action des interactions).</simpara>
<tip><simpara>Pour ajouter un scénario, créer une nouvelle action, écrire "scenario" sans accent, appuyer sur la touche tabulation de votre clavier pour faire apparaitre le sélecteur de scénario.</simpara></tip>
</section>
<section id="_interaction_multiple_commandes">
<title>Interaction multiple commandes</title>
<simpara>Nous allons ici voir tout l&#8217;intérêt et toute la puissance des interactions, avec une phrase modèle nous allons pouvoir générer des phrases pour tout un groupe de commandes.</simpara>
<simpara>On va reprendre ce qui a été fait plus haut, supprimer les actions que l&#8217;on avait ajoutées et à la place de la phrase fixe dans "Demande", nous allons utiliser les tags <emphasis role="strong">#commande#</emphasis> et <emphasis role="strong">#equipement#</emphasis>, Jeedom va donc remplacer ces tags par le nom des commandes et le nom de l'équipement (on peut voir l&#8217;importance d&#8217;avoir des noms de commande/équipement cohérents).</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact006.png"/>
  </imageobject>
  <textobject><phrase>../images/interact006.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>On peut donc constater ici que Jeedom a généré 152 phrases à partir de notre modèle, toutefois elles ne sont pas très bien construites et l&#8217;on a un peu de tout.</simpara>
<simpara>Pour faire de l&#8217;ordre dans tout cela, on va utiliser les filtres (partie droite de notre page de configuration).
Dans cet exemple, on veut générer des phrases pour allumer des lumières. On peut donc décocher le type de commande info (si je sauve, il ne me reste plus que 95 phrase générées), puis dans les sous-types, on peut ne garder coché que défaut qui correspond au bouton d&#8217;action (reste donc plus que 16 phrases).</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact007.png"/>
  </imageobject>
  <textobject><phrase>../images/interact007.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>C&#8217;est mieux mais on peut faire encore plus naturel. Si je prends l&#8217;exemple généré "On entrée", il serait bien de pouvoir transformer cette phrase en "allume l&#8217;entrée" ou en "allumer l&#8217;entrée".
Pour faire cela Jeedom dispose sous le champ demande, un champ synonyme qui va nous permettre de nommer différemment le nom des commandes dans nos phrases "générer", ici c&#8217;est "on", j&#8217;ai même des "on2" dans les modules qui peuvent contrôler 2 sorties.</simpara>
<simpara>On va donc dans les synonymes indiquer le nom de la commande et le(s) synonyme(s) à utiliser :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact008.png"/>
  </imageobject>
  <textobject><phrase>../images/interact008.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>On peut voir ici une syntaxe un peu nouvelle pour les synonymes, un nom de commande peut avoir plusieurs synonymes, ici "on" a comme synonyme "allume" et "allumer", la syntaxe c&#8217;est donc "nom de la commande" <emphasis role="strong">=</emphasis> "synonyme 1"<emphasis role="strong">,</emphasis> "synonyme 2" (on peut mettre autant de synonyme que l&#8217;on veut), puis pour ajouter des synonymes pour un autre nom de commande il suffit d&#8217;ajouter après le dernier synonyme une barre verticale "|" à la suite duquel vous pouvez à nouveau nommer la commande qui va avoir des synonymes comme pour la première partie.</simpara>
<simpara>Bien c&#8217;est déjà mieux mais il manque encore pour la commande "on" "entrée" le "l' " et pour d&#8217;autre le "la" ou "le" ou "un" etc&#8230;
On pourrait modifier le nom de l'équipement pour l&#8217;ajouter, ce serait une solution, sinon on peut utiliser les variations dans la demande, cela consiste à lister une série de mots possibles à un emplacement de la phrase, Jeedom va donc générer des phrases avec ses variations.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact009.png"/>
  </imageobject>
  <textobject><phrase>../images/interact009.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Comme vous pouvez le voir dans la liste à gauche, on a maintenant des phrases un peu plus correctes avec des phrases qui ne sont pas justes, pour notre exemple "on" "entrée", on trouve donc "Allume entrée", "Allume un entrée", "Allume une entrée", "Allume l&#8217;entrée" etc&#8230; On a donc toutes les variantes possibles avec ce que l&#8217;on a ajouté entre les "[ ]" et ceci pour chaque synonyme, ce qui génère rapidement beaucoup de phrases (ici 168).</simpara>
<simpara>Afin d&#8217;affiner et de ne pas avoir des choses improbables telles que "allume l&#8217;télé", on peut autoriser Jeedom à supprimer les demandes syntaxiquement incorrectes. Il va donc supprimer ce qui est trop éloigné de la syntaxe réelle d&#8217;une phrase.
Dans notre cas on passe de 168 phrases à 130 phrases.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact010.png"/>
  </imageobject>
  <textobject><phrase>../images/interact010.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Il devient donc important de bien construire ses phrases modèles et synonymes ainsi que de sélectionner les bons filtres pour ne pas générer trop de phrases inutiles.
Personnellement, je trouve intéressant d&#8217;avoir quelques incohérences du style "un entrée" car si chez vous, vous avez une personne étrangère qui ne parle pas correctement le français les interactions fonctionneront tout de même.</simpara>
</section>
<section id="_interaction_fonction_avancé">
<title>Interaction fonction Avancé</title>
<section id="_personnaliser_les_réponses">
<title>Personnaliser les réponses</title>
<simpara>Jusqu'à présent comme réponse à une interaction nous avions une simple phrase qui n&#8217;indique pas grand-chose à part que quelque chose s&#8217;est passé.
L&#8217;idée serait que Jeedom nous indique ce qu&#8217;il a fait un peu plus précisément.
C&#8217;est là qu&#8217;intervient le champ réponse dans lequel on va pouvoir personnaliser le retour en fonction de la commande exécutée.</simpara>
<simpara>Pour ce faire nous allons à nouveau utiliser les Tag Jeedom
Pour nos lumières on peut utiliser une phrase du style : J&#8217;ai bien allumé #equipement# (voir capture ci-dessous).</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact011.png"/>
  </imageobject>
  <textobject><phrase>../images/interact011.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>On peut aussi ajouter n&#8217;importe quelle valeur d&#8217;une autre commande comme une température, un nombre de personnes .etc&#8230;.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact012.png"/>
  </imageobject>
  <textobject><phrase>../images/interact012.png</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section id="_conversion_binaire">
<title>Conversion binaire</title>
<simpara>Les conversions binaires s&#8217;appliquent aux commandes de type info dont le sous-type est binaire (retourne 0 ou 1 uniquement) il faut donc activer les bons filtres comme on peut le voir sur la capture un peu plus bas (pour les catégories on peut toutes les cocher, pour l&#8217;exemple je n&#8217;ai gardé que lumière).</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact013.png"/>
  </imageobject>
  <textobject><phrase>../images/interact013.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Comme on peut le voir ici, j&#8217;ai conservé quasiment la même structure pour la demande (c&#8217;est volontaire pour se concentrer sur les spécificités), j&#8217;ai adapté bien sûr les synonymes pour avoir quelque chose de cohérent, par contre pour la réponse il est impératif de mettre uniquement #valeur# qui représente le 0 ou 1 que Jeedom va remplacer par la conversion binaire qui suit.</simpara>
<simpara>Le champ conversion binaire doit contenir 2 réponses, en premier la réponse si la valeur de la commande vaut 0 puis pour la séparer de la réponse si la commande vaut 1 une barre verticale "|".
Ici les réponses sont simplement non et oui mais on pourrait y mettre une phrase un peu plus longue.</simpara>
<warning><simpara>Les tags ne fonctionnent pas dans les conversions binaires.</simpara></warning>
<simpara>====== Utilisateurs autorisés</simpara>
<simpara>Le champ "Utilisateurs autorisés" permet de n’autoriser que certaines personnes à exécuter la commande, vous pouvez mettre plusieurs profils en les séparant par un "|".</simpara>
<simpara>Exemple : personne1|personne2</simpara>
<simpara>On peut imaginer qu&#8217;une alarme peut être activée ou désactivée par un enfant ou un voisin qui viendrait arroser les plantes en votre absence&#8230;</simpara>
<simpara>====== Regexp d&#8217;exclusion</simpara>
<important><simpara>Fonction réservée aux connaisseurs ou téméraires qui savent utiliser Google.</simpara></important>
<simpara>Depuis Jeedom V2.00 on a la possibilité de créer des <ulink url="https://fr.wikipedia.org/wiki/Expression_rationnelle">Regexp</ulink> d&#8217;exclusion, si une phrase générée correspond à cette Regexp elle sera supprimée.
L&#8217;intérêt c&#8217;est de pouvoir supprimer des faux positif, c&#8217;est à dire une phrase générée par Jeedom qui active quelque chose qui ne correspond pas à ce que l&#8217;on veut ou qui viendrait parasiter une autre interaction qui aurait une phrase similaire.</simpara>
<simpara>On a 2 endroits pour appliquer une Regexp :</simpara>
<itemizedlist>
<listitem>
<simpara>
dans l&#8217;interaction même dans le champ "Regexp d&#8217;exclusion".
</simpara>
</listitem>
<listitem>
<simpara>
Dans le menu "Configuration"&#8594;"Configuration des interactions"&#8594;champ "Regexp général d&#8217;exclusion pour les interactions".
</simpara>
</listitem>
</itemizedlist>
<simpara>Pour le champ "Regex général d&#8217;exclusion pour les interactions", cette règle sera appliquée à toutes les interactions, qui seront créées ou sauvegarder de nouveau par la suite, si on veut l’appliquer à toutes les interactions existantes il faut régénérer les interactions.
Généralement on l&#8217;utilise pour effacer des phrases incorrectement formées se retrouvant dans la plupart des interactions générées.</simpara>
<simpara>Pour le champ "Regexp d&#8217;exclusion" dans la page de config de chaque interaction, on peut mettre une Regexp spécifique qui va agir uniquement sur ladite interaction, elle vous permet donc de supprimer plus précisément  pour une interaction, cela peut aussi permettre d&#8217;effacer une interaction pour une commande spécifique pour laquelle on ne veut pas offrir cette possibilité dans le cadre d&#8217;une génération multiple commandes.</simpara>
<simpara>La capture d'écran qui suit montre l&#8217;interaction sans le Regexp. Dans la liste de gauche, je filtre les phrases pour ne vous montrer que les phrases qui vont être supprimées. En réalité il y a 76 phrases générées avec la configuration de l&#8217;interaction.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact014.png"/>
  </imageobject>
  <textobject><phrase>../images/interact014.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Comme vous pouvez le voir sur la capture suivante, j&#8217;ai ajouté une regexp simple qui va chercher le mot "Julie" dans les phrases générées et les supprimer, toutefois on peut voir dans la liste de gauche qu&#8217;il y a toujours des phrases avec le mot "julie", dans les expressions régulières, Julie n&#8217;est pas égale à julie, on appelle cela une sensibilité à la casse ou en bon français une majuscule est différente d&#8217;une minuscule.
Comme on peut le voir dans la capture suivante, il ne reste plus que 71 phrases, les 5 avec un "Julie" ont été supprimées.</simpara>
<simpara>Une expression régulière se compose comme suit :</simpara>
<itemizedlist>
<listitem>
<simpara>
En premier un délimiteur, ici c&#8217;est une barre oblique "/" placée en début et fin de l&#8217;expression.
</simpara>
</listitem>
<listitem>
<simpara>
le point qui suit la barre oblique représente n&#8217;importe quel caractère, espace, ou nombre.
</simpara>
</listitem>
<listitem>
<simpara>
Le "*" quant à lui indique qu&#8217;il peut y avoir 0 ou plusieurs fois le caractère qui le précède, ici un point, donc en bon français n&#8217;importe quelle élément.
</simpara>
</listitem>
<listitem>
<simpara>
Puis Julie, qui est le mot à rechercher (mot ou autre schéma d&#8217;expression), suivi à nouveau d&#8217;un point puis barre oblique.
</simpara>
</listitem>
</itemizedlist>
<simpara>Si on traduit cette expression en une phrase cela donnerait "cherche le mot Julie qui est précédé par n&#8217;importe quoi et suivi de n&#8217;importe quoi".</simpara>
<simpara>C&#8217;est une version extrêmement simple des expressions régulièrse mais déjà très compliquée à comprendre, il m’a fallu un moment pour en saisir le fonctionnement. Comme exemple un peu plus complexe, une regexp pour vérifier une adresse url :</simpara>
<simpara>/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/</simpara>
<simpara>Une fois que vous pouvez écrire cela, vous avez compris les expressions régulières.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact015.png"/>
  </imageobject>
  <textobject><phrase>../images/interact015.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Pour résoudre le problème de majuscule et minuscule, on peut ajouter à notre expression une option qui va la rendre insensible à la casse, ou autrement dit, qui considère une lettre minuscule égale à une majuscule; pour ce faire on doit simplement ajouter à la fin de notre expression un "i".</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact016.png"/>
  </imageobject>
  <textobject><phrase>../images/interact016.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Avec l&#8217;ajout de l&#8217;option "i" on constate qu&#8217;il ne reste plus que 55 phrases générées, et dans la liste de gauche avec le filtre julie pour rechercher les phrases qui contiennent ce mot, on constate qu&#8217;il y en a bien plus.</simpara>
<simpara>Comme c&#8217;est un sujet extrêmement complexe, je ne vais pas aller plus en détail ici, il y a suffisamment de tutos sur le net pour vous aider, et n&#8217;oubliez pas Google est votre ami aussi car oui, c&#8217;est mon ami, c&#8217;est lui qui m’a appris à comprendre les Regexp et même à coder. Donc s&#8217;il m&#8217;a aidé, il peut aussi vous aider si vous y mettez de la bonne volonté.</simpara>
<simpara>Lien utile :</simpara>
<itemizedlist>
<listitem>
<simpara>
<ulink url="http://google.fr">http://google.fr</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
<ulink url="http://www.commentcamarche.net/contents/585-javascript-l-objet-regexp">http://www.commentcamarche.net/contents/585-javascript-l-objet-regexp</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
<ulink url="https://www.lucaswillems.com/fr/articles/25/tutoriel-pour-maitriser-les-expressions-regulieres">https://www.lucaswillems.com/fr/articles/25/tutoriel-pour-maitriser-les-expressions-regulieres</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
<ulink url="https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/les-expressions-regulieres-partie-1-2">https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/les-expressions-regulieres-partie-1-2</ulink>
</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</section>
</section>
<section id="_exemples">
<title>Exemples</title>
<section id="_réponse_composé_de_plusieurs_informations">
<title>Réponse composé de plusieurs informations</title>
<simpara>Il est aussi possible de mettre plusieurs commandes info dans une réponse, par exemple pour avoir un résumé de situation.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact021.png"/>
  </imageobject>
  <textobject><phrase>../images/interact021.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Dans cet exemple on voit une phrase simple qui va nous retourner une réponse avec 3 températures différentes, on peut donc ici mettre un peu tout ce que l&#8217;on veut afin d&#8217;avoir un ensemble d&#8217;informations en une seule fois.</simpara>
</section>
<section id="_y_a_t_il_quelqu_8217_un_dans_la_chambre">
<title>Y a-t-il quelqu&#8217;un dans la chambre ?</title>
<section id="_version_basique">
<title>Version basique</title>
<itemizedlist>
<listitem>
<simpara>
La question est donc "y’a-t-il quelqu’un dans la chambre"
</simpara>
</listitem>
<listitem>
<simpara>
La réponse sera "non il n’y a personne dans la chambre" ou "oui il y a quelqu’un dans la chambre"
</simpara>
</listitem>
<listitem>
<simpara>
La commande qui répond à ça est "#[Chambre de julie][FGMS-001-2][Présence]#"
</simpara>
</listitem>
</itemizedlist>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact017.png"/>
  </imageobject>
  <textobject><phrase>../images/interact017.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Cette exemple cible précisément un équipement spécifique ce qui permet d&#8217;avoir une réponse personnalisée. On pourrait donc imaginer remplacer la réponse de l&#8217;exemple par "non il n’y a personne dans la chambre de julie|oui il y a quelqu’un dans la chambre de julie"</simpara>
</section>
<section id="_evolution">
<title>Evolution</title>
<itemizedlist>
<listitem>
<simpara>
La question est donc "#commande# [dans la |dans le] #objet#"
</simpara>
</listitem>
<listitem>
<simpara>
La réponse sera "non il n’y a personne dans la pièce" ou "oui il y a quelqu’un dans la pièce"
</simpara>
</listitem>
<listitem>
<simpara>
Il n&#8217;y a pas de commande qui réponde à ça dans la partie Action vu que c&#8217;est une interaction Multiple commandes
</simpara>
</listitem>
<listitem>
<simpara>
En ajoutant une expression régulière on peut nettoyer les commandes que l&#8217;on ne veut pas voir pour n&#8217;avoir que les phrases sur les commandes "Présence".
</simpara>
</listitem>
</itemizedlist>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact018.png"/>
  </imageobject>
  <textobject><phrase>../images/interact018.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Sans le Regexp on obtient ici 11 phrases, or mon interaction a pour but de générer des phrases uniquement pour demander s&#8217;il y a quelqu&#8217;un dans une pièce, donc je n&#8217;ai pas besoin d'état de lampe ou autre comme les prises, ce qui peut être résolu avec le filtrage regexp.
Pour rendre encore plus flexible on peut ajouter des synonymes, mais dans ce cas il ne faudra pas oublier de modifier la regexp.</simpara>
</section>
</section>
<section id="_connaître_la_température_humidité_luminosité">
<title>Connaître la température/humidité/luminosité</title>
<section id="_version_basique_2">
<title>Version basique</title>
<simpara>On pourrait écrire la phrase en dur comme par exemple "quelle est la température du salon", mais il faudrait en faire une pour chaque capteur de température, luminosité et humidité. Avec le système de génération de phrase Jeedom, on peut donc avec une seule interaction générer les phrases pour tous les capteurs de ces 3 types de mesure.</simpara>
<simpara>Ici un exemple générique qui sert à connaître la température, l’humidité, la luminosité des différentes pièces (objet au sens Jeedom).</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact019.png"/>
  </imageobject>
  <textobject><phrase>../images/interact019.png</phrase></textobject>
</mediaobject>
</informalfigure>
<itemizedlist>
<listitem>
<simpara>
On peut donc voir qu&#8217;une phrase générique type "Quelle est la température du salon" ou "Quelle est la luminosité de la chambre" peut être convertie en : "quelle est [la |l']#commande# <phrase role="du |de la |de l'| sur le |dans le | dans la">objet</phrase>" (l’utilisation de [mot1 | mot2] permet de dire cette possibilité ou celle-là pour générer toutes les variantes possibles de la phrase avec mot1 ou mot2). Lors de la génération Jeedom va générer toutes les combinaisons possibles de phrases avec toutes les commandes existantes (en fonction des filtres) en remplaçant #commande# par le nom de la commande et #objet# par le nom de l’objet.
</simpara>
</listitem>
<listitem>
<simpara>
La réponse sera de type "21 °C" ou "200 lux" il suffit de mettre : #valeur# #unite# (l&#8217;unité est à compléter dans la configuration de chaque commande pour laquelle on veut en avoir une)
</simpara>
</listitem>
<listitem>
<simpara>
Cette exemple génère donc une phrase pour toutes les commandes de type info numérique qui ont une unité, on peut donc décocher des unités dans le filtre de droite limité au type qui nous intéresse.
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_evolution_2">
<title>Evolution</title>
<simpara>On peut donc ajouter des synonymes au nom de commande pour avoir quelque chose de plus naturel, ajouter un regexp pour filtrer les commandes qui n&#8217;ont rien à voir avec notre interaction.</simpara>
<simpara>Ajout de synonyme, permet de dire à Jeedom qu&#8217;une commande s&#8217;appellant "X" peut aussi s&#8217;appeler "Y" et donc dans notre phrase si on a "allume y", Jeedom sait que c&#8217;est allumer x. Cette méthode est très pratique pour renommer des noms de commande qui quand elles sont affichées à l'écran sont écrites d&#8217;une façon qui n&#8217;est pas naturelle vocalement ou dans une phrase écrite comme les "ON", un bouton écrit comme cela est totalement logique mais pas dans le contexte d&#8217;une phrase.</simpara>
<simpara>On peut aussi ajouter un filtre Regexp pour enlever quelques commandes. En reprenant l&#8217;exemple simple on voit des phrases "batterie" ou encore "latence", qui n&#8217;ont rien à voir avec notre interaction température/humidité/luminosité.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact020.png"/>
  </imageobject>
  <textobject><phrase>../images/interact020.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>On peut donc voir un regexp :</simpara>
<simpara><emphasis role="strong">(batterie|latence|pression|vitesse|consommation)</emphasis></simpara>
<simpara>Celui-ci permet de supprimer toutes les commandes qui ont l&#8217;un de ces mots dans leur phrase</simpara>
<note><simpara>Le regexp ici est une version simplifiée pour une utilisation simple. On peut donc soit utiliser les expressions traditionnelles, soit utiliser les expressions simplifiées comme dans cet exemple.</simpara></note>
</section>
</section>
<section id="_piloter_un_dimmer_ou_un_thermostat_slider">
<title>Piloter un dimmer ou un thermostat (slider)</title>
<section id="_version_basique_3">
<title>Version basique</title>
<simpara>Il est possible de piloter une lampe en pourcentage (variateur) ou un thermostat avec les interactions. Voici un exemple pour piloter son variateur sur une lampe avec des interactions :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact022.png"/>
  </imageobject>
  <textobject><phrase>../images/interact022.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Comme on le voit, il y a ici dans la demande le tag <emphasis role="strong">#consigne#</emphasis> (on peut mettre ce que l&#8217;on veut) qui est repris dans la commande du variateur pour appliquer la valeur voulue.
Pour ce faire, on a 3 parties :
* Demande : dans laquelle on crée un tag qui va représenter la valeur qui sera envoyée à l&#8217;interaction.
* Réponse : on réutilise le tag pour la réponse afin d'être sûr que Jeedom a correctement compris la demande.
* Action : on met une action sur la lampe que l&#8217;on veut piloter et dans la valeur on lui passe notre tag consigne.</simpara>
<note><simpara>On peut utiliser n&#8217;importe quel tag excepté ceux déjà utilisés par Jeedom, il peut y en avoir plusieurs pour piloter par exemple plusieurs commandes. A noter aussi que tous les tags sont passés aux scénarios lancés par l&#8217;interaction (il faut toutefois que le scénario soit en "Exécuter en avant plan").</simpara></note>
</section>
<section id="_evolution_3">
<title>Evolution</title>
<simpara>On peut vouloir piloter toutes les commandes de type curseur avec une seule interaction. Avec l&#8217;exemple qui suit on va donc pouvoir commander plusieurs variateurs avec une seule interaction et donc générer un ensemble de phrases pour les contrôler.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact033.png"/>
  </imageobject>
  <textobject><phrase>../images/interact033.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Dans cette interaction, on n&#8217;a pas de commande dans la partie action, on laisse Jeedom générer à partir des tags la liste de phrases, on peut voir le tag <emphasis role="strong">#slider#</emphasis>. Il est impératif d&#8217;utiliser ce tag pour les consignes dans une interaction multiple commandes, il peut ne pas être le dernier mot de la phrase.
On peut aussi voir dans l&#8217;exemple que l&#8217;on peut utiliser dans la réponse un tag qui ne fait pas partie de la demande, la majorité des tags disponibles dans les scénarios sont disponibles aussi dans les interactions et donc peuvent être utilisés dans une réponse.</simpara>
<simpara>Résultat de l&#8217;interaction :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact034.png"/>
  </imageobject>
  <textobject><phrase>../images/interact034.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>On peut constater que le tag <emphasis role="strong">#equipement#</emphasis> qui n&#8217;est pas utilisé dans la demande est bien complété dans la réponse.</simpara>
</section>
</section>
<section id="_piloter_la_couleur_d_8217_un_bandeau_de_led">
<title>Piloter la couleur d&#8217;un bandeau de LED</title>
<simpara>Il est possible de piloter une commande couleur par les interactions en demandant par exemple à Jeedom d&#8217;allumer un bandeau de led en bleu.
Voilà l&#8217;interaction à faire :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact023.png"/>
  </imageobject>
  <textobject><phrase>../images/interact023.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Jusque là rien de bien compliqué, il faut en revanche avoir configuré les couleurs dans Jeedom pour que cela fonctionne; rendez-vous dans le menu &#8594; Configuration (en haut à droite) puis dans la partie "Configuration des interactions" :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact024.png"/>
  </imageobject>
  <textobject><phrase>../images/interact024.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Comme on peut le voir sur la capture, il n&#8217;y a pas de couleur configurée, il faut donc ajouter des couleurs avec le "+" à droite. Le nom de la couleur, c&#8217;est le nom que vous allez passer à l&#8217;interaction, puis dans la partie de droite (colonne "Code HTML"), en cliquant sur la couleur noire on peut choisir une nouvelle couleur.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact025.png"/>
  </imageobject>
  <textobject><phrase>../images/interact025.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>On peut en ajouter autant que bon nous semble, on peut mettre comme nom n&#8217;importe lequel, ainsi on pourrait imaginer attribuer une couleur pour le nom de chaque membre de la famille.</simpara>
<simpara>Une fois configuré, vous dites "Allume le sapin en vert", Jeedom va rechercher dans la demande une couleur et l&#8217;appliquer à la commande.</simpara>
</section>
<section id="_utilisation_couplée_à_un_scénario">
<title>Utilisation couplée à un scénario</title>
<section id="_version_basique_4">
<title>Version basique</title>
<simpara>Il est possible de coupler une interaction à un scénario afin de réaliser des actions un peu plus complexes que l&#8217;exécution d&#8217;une simple action ou d&#8217;une demande d&#8217;information.</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact026.png"/>
  </imageobject>
  <textobject><phrase>../images/interact026.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Cette exemple permet donc de lancer le scénario qui est lié dans la partie action, on peut bien sûr en avoir plusieurs.</simpara>
</section>
</section>
<section id="_programmation_d_8217_une_action_avec_les_interactions">
<title>Programmation d&#8217;une action avec les interactions</title>
<simpara>Les interactions permettent de faire beaucoup de choses en particulier. Vous pouvez programmer dynamiquement une action. Exemple : "Met le chauffage à 22 pour 14h50". Pour cela rien de plus simple, il suffit d&#8217;utiliser les tags #time# (si on définit une heure précise) ou  #duration# (pour dans X temps, exemple dans 1 heure) :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact23.JPG"/>
  </imageobject>
  <textobject><phrase>../images/interact23.JPG</phrase></textobject>
</mediaobject>
</informalfigure>
<note><simpara>Vous remarquerez dans la réponse le tag #value# celui-ci contient dans le cas d&#8217;une interaction programmée l&#8217;heure de programmation effective</simpara></note>
<simpara>Voilà le résultat :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact24.JPG"/>
  </imageobject>
  <textobject><phrase>../images/interact24.JPG</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
</section>
<section id="_tester_une_interaction">
<title>Tester une interaction</title>
<simpara>Le bouton Tester (en haut a gauche) vous permet de saisir une phrase pour tester son bon fonctionnement et l&#8217;exécuter :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact11.JPG"/>
  </imageobject>
  <textobject><phrase>../images/interact11.JPG</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>En réponse, Jeedom vous retournera la réponse qui correspond à l&#8217;interaction (champ réponse) :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact13.JPG"/>
  </imageobject>
  <textobject><phrase>../images/interact13.JPG</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section id="_configuration">
<title>Configuration</title>
<simpara>La configuration est accessible à partir du menu Configuration (en haut à droite) puis la partie "Configuration des interactions" :</simpara>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="../images/interact14.JPG"/>
  </imageobject>
  <textobject><phrase>../images/interact14.JPG</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Vous avez ici 3 paramètres :</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis role="strong">Sensibilité</emphasis> : il y a 4 niveaux de correspondance
</simpara>
<itemizedlist>
<listitem>
<simpara>
pour 1 mot : le niveau de correspondance pour les interactions à un seul mot
</simpara>
</listitem>
<listitem>
<simpara>
2 mots : le niveau de correspondance pour les interactions à deux mots
</simpara>
</listitem>
<listitem>
<simpara>
3 mots : le niveau de correspondance pour les interactions à trois mots
</simpara>
</listitem>
<listitem>
<simpara>
+ de 3 mots : le niveau de correspondance pour les interactions à plus de trois mots
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>La sensibilité va de 1 (correspond exactement) à 99 (je louche donc c&#8217;est ok pour moi),</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis role="strong">Ne pas répondre si l&#8217;interaction n&#8217;est pas comprise</emphasis> : par défaut Jeedom répond "je n&#8217;ai pas compris" si l&#8217;interaction n&#8217;est pas comprise. Il est possible de désactiver ce fonctionnement pour que Jeedom ne réponde rien, mettre le bouton à oui pour désactiver la réponse.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis role="strong">Regex général d&#8217;exclusion pour les interactions</emphasis> : permet de définir une regexp qui, si elle correspond à une interaction, supprimera automatiquement cette phrase de la génération (réservé aux experts). Pour plus d&#8217;infos voir les explications dans le chapitre <emphasis role="strong">"Regexp d&#8217;exclusion"</emphasis>
</simpara>
</listitem>
</itemizedlist>
<simpara>Puis vous retrouvez la partie paramétrage des couleurs qui est décrite en détail dans le chapitre <emphasis role="strong">"Piloter la couleur d’un bandeau de LED"</emphasis></simpara>
<important><simpara>Ne pas oublier de sauver en bas de page.</simpara></important>
<tip><simpara>Si vous activez les logs au niveau debug vous avez un log interact qui vous donne la niveau de sensibilité pour chaque comparaison de phrases, cela peut permettre de régler celui-ci plus facilement.</simpara></tip>
</section>
<section id="_résumé">
<title>Résumé</title>
<variablelist>
<varlistentry>
<term>
Demande
</term>
<listitem>
<simpara>
Vous pouvez utiliser "#commande#" et "#objet#" (les 2 doivent absolument être utilisés ensemble) pour générer une liste de commandes (il est possible de filtrer la génération pour réduire la liste). Il est aussi possible d&#8217;utiliser "#equipement#" (utile si plusieurs commandes appartenant au même objet ont le même nom)
Exemple : Quelle est la "#commande# [du |de la |de l']#objet#"
Lors de la génération des commandes, vous pouvez utiliser le champ synonyme (syn1=syn2,syn3|syn4=syn5) pour remplacer le nom des objets, des équipements et/ou des commandes
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Réponse
</term>
<listitem>
<simpara>
Vous pouvez utiliser "#valeur#" et "#unite#" dans le retour (ils seront remplacés par la valeur et l&#8217;unité de la commande). Vous avez aussi accès à tous les tags des scénarios et à :
"#profile#" &#8658; Nom de la personne ayant lancé l&#8217;exécution (peut ne pas être disponible)
Exemple : "#valeur# #unite#"
Vous pouvez utiliser le champ conversion binaire pour convertir les valeurs binaires (0 et 1) :
Exemple : non|oui
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Personne
</term>
<listitem>
<simpara>
Le champ personne permet de n&#8217;autoriser que certaines personnes à exécuter la commande, vous pouvez mettre plusieurs profils en les séparant par |.
Exemple : personne1|personne2
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</article>
