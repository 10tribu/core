= API JSON RPC

Aquí esta la documentación sobre los métodos de la API. En primer lugar están las especificaciones (JSON RPC 2.0):

A la API se accede a través de la url: #URL_JEEDOM#/core/api/jeeApi.php

== Misceláneos

=== ping

Devuelve pong , permite probar la comunicación con Jeedom

=== versión

Devuelve la versión de Jeedom

=== datetime

Retourne le datetime de Jeedom en microsecondes

== API JSON Event

=== event::changes 

Retourne la liste des changements depuis le datetime passé en paramètre (doit être en microsecondes). Vous aurez aussi dans la réponse le datetime courant de Jeedom (à réutiliser pour l'interrogation suivante)

Parámetros:

- int datetime

== API JSON Plugin

=== plugin::listPlugin
Devuelve una lista de todos los plugins

Parámetros:

-int activateOnly = 0 (devuelve sólo la lista de plugins activos)
-int orderByCaterogy = 0 (devuelve la lista de plugins ordenados por categoría)


== API JSON Objet

=== object::all
Devuelve una lista de todos los objetos

=== object::full
Retourne la liste de tous les objets, avec pour chaque objet tous ses équipements et pour chaque équipement toutes ses commandes ainsi que les états de celles-ci (pour les commandes de type info)

=== object::byId
Devuelve el objeto especificado

Parámetros:

- int id

=== object::fullById
Retourne un objet, ses équipements et pour chaque équipement toutes ses commandes ainsi que les états de cellse-ci (pour les commandes de type info)

== API JSON EqLogic
=== eqLogic::all
Devuelve una lista de todos los dispositivos

=== eqLogic::fullById
Retourne un équipement et ses commandes ainsi que les états de celles-ci (pour les commandes de type info)

=== eqLogic::byId
Devuelve el dispositivo especificado

Parámetros:

- int id

=== eqLogic::byType

Devuelve todas las instalaciones pertenecientes al tipo especificado (plugin)

Parámetros:

- string type

=== eqLogic::byObjectId
Devuelve todas las instalaciones pertenecientes a la especificada

Parámetros:
- int object_id

=== eqLogic::byTypeAndId
Devuelve un array de equipos dependiendo de la configuración. El resultado será de la forma array('eqType1' =>array( 'id'=>...,'cmds' => array(....)),'eqType2' =>array( 'id'=>...,'cmds' => array(....))....,id1 => array( 'id'=>...,'cmds' => array(....)),id2 => array( 'id'=>...,'cmds' => array(....))..)

Parámetros:

-string eqType [] = array de los tipos de dispositivos necesarios
-int [] id = matriz ID de dispositivos deseados personalizados

=== eqLogic::save
Devuelve el dispositivo guardado/creado

Parámetros:

-int id (vacío si es una creación)
-string eqType_name (tipo guión de dispositivo,  virtual...)
- string $name
- string $logicalId = <nowiki>''</nowiki>
- int $object_id = null
- int $eqReal_id = null;
- int $isVisible = 0;
- int $isEnable = 0;
- array $configuration;
- int $timeout;
- array $category;

== API JSON Cmd

=== cmd::all
Devuelve la lista de todos los comandos

=== cmd::byId
Devuelve el comando especificado

Parámetros:

- int id

=== cmd::byEqLogicId
Devuelve todos los comandos que pertenecen al dispositivo especificado

Parámetros:

- int eqLogic_id

=== cmd::execCmd
Ejecuta el comando especificado

Parámetros:

- int id
-[options] lista de opciones  del comando (dependiendo el tipo y el subtipo del comando)

=== cmd::getStatistique
Retourne les statistiques sur la commande (ne marche que sur les commandes de type info et historisées)

Parámetros:

- int id
-string startTime: fecha de inicio para el cálculo de las estadística
- string endTime : fecha de fin del calculo de las estadisticas

=== cmd::getTendance
Devuelve la tendencia sobre el comando (no funciona con los comandos  tipo información e historicos)

Parámetros:

- int id
- string startTime : fecha de inicio de cálculo de la tendencia
- string endTime : fecha final del cálculo de la tendencia

=== cmd::getHistory
Devuelve el historico del comando (no funciona con comandos tipo información e historicos)

Parámetros:

- int id
- string startTime : fecha de inicio del historico
- string endTime : date de fin del historico


== API JSON Scenario

=== scenario::all
Devuelve una lista de todos los escenarios

=== scenario::byId
Devuelve el escenario especificado

Parámetros:

- int id

=== scenario::changeState
Cambia el estado del escenario especificado.

Parámetros:

- int id
- string state : [run,stop,enable,disable]

== API JSON datastore (variable)

=== datastore::byTypeLinkIdKey
Recupera el valor de una variable que se almacena en el almacén de datos

Parámetros:

- string type : tipo de valor almacenado (para los escenarios es scenario)
- id linkId : -1 pour le global (valeur pour les scénarios par défaut, ou l'id du scénario)
- string key : nombre de valor

=== datastore::save
Guarda el valor de una variable en el almacén de datos

Parámetros:

- string type : tipo de valor almacenado (para los escenarios es scenario)
- id linkId : -1 pour le global (valeur pour les scénarios par défaut, ou l'id du scénario)
- string key : nombre de valor
- mixte value : valor a guardar

== API JSON Message

=== message::all
Devuelve una lista de todos los mensajes

=== message::removeAll
Elimina todos los mensajes

== API JSON Interaction

=== interact::tryToReply
Essaie de faire correspondre une demande avec une interaction, exécute l'action et répond en conséquence

Parámetros:

- query  (frase de petición)

== API JSON System

=== jeedom::halt
Permite detener Jeedom

=== jeedom::reboot
Permite reiniciar Jeedom


== API JSON plugin

=== plugin::install
Instalación/actualización de un plugin determinado

Parámetros:

- string plugin_id : nombre del plugin (nombre lógico)

=== plugin::remove
Eliminación de un plugin determinado

Parámetros:

- string plugin_id : nombre del plugin (nombre lógico)

== API JSON update

=== update::all
Devuelve una lista de todos los componentes instalados, sus versiones e información asociada

=== update::checkUpdate
Permet de vérifier les mises à jour

=== update::update
Permite actualizar Jeedom y todos los plugins

== API JSON Ejemplos
Voici un exemple d'utilisation de l'API. Pour l'exemple ci-dessous j'utilise https://github.com/jeedom/core/blob/stable/core/class/jsonrpcClient.class.php[cette class php] qui permet de simplifier l'utilisation de l'api.

Recuperar la lista de objetos:


[source,php]
$jsonrpc = new jsonrpcClient('#URL_JEEDOM#/core/api/jeeApi.php', #API_KEY#);
if($jsonrpc->sendRequest('object::all', array())){
    print_r($jsonrpc->getResult());
}else{
    echo $jsonrpc->getError();
}
 
Ejecutar un comando (con una opción de un título y mensaje)


[source,php]
$jsonrpc = new jsonrpcClient('#URL_JEEDOM#/core/api/jeeApi.php', #API_KEY#);
if($jsonrpc->sendRequest('cmd::execCmd', array('id' => #cmd_id#, 'options' => array('title' => 'Coucou', 'message' => 'Ca marche')))){
    echo 'OK';
}else{
    echo $jsonrpc->getError();
}
 
L'API est bien sur utilisable avec d'autres langages (simplement un post sur une page) 